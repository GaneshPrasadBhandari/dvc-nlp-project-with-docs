{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My First Page dvc-nlp-project-with-docs DVC NLP project template STEPS - STEP 01- Create a repository by using template repository STEP 02- Clone the new repository STEP 03- Create a conda environment after opening the repository in VSCODE conda create --prefix ./env python = 3 .8 -y conda activate ./env OR source activate ./env STEP 04- install the requirements pip install -r requirements.txt STEP 05- initialize the dvc project dvc init STEP 06- commit and push the changes to the remote repository","title":"Home"},{"location":"#my-first-page","text":"","title":"My First Page"},{"location":"#dvc-nlp-project-with-docs","text":"DVC NLP project template","title":"dvc-nlp-project-with-docs"},{"location":"#steps-","text":"","title":"STEPS -"},{"location":"#step-01-create-a-repository-by-using-template-repository","text":"","title":"STEP 01- Create a repository by using template repository"},{"location":"#step-02-clone-the-new-repository","text":"","title":"STEP 02- Clone the new repository"},{"location":"#step-03-create-a-conda-environment-after-opening-the-repository-in-vscode","text":"conda create --prefix ./env python = 3 .8 -y conda activate ./env OR source activate ./env","title":"STEP 03- Create a conda environment after opening the repository in VSCODE"},{"location":"#step-04-install-the-requirements","text":"pip install -r requirements.txt","title":"STEP 04- install the requirements"},{"location":"#step-05-initialize-the-dvc-project","text":"dvc init","title":"STEP 05- initialize the dvc project"},{"location":"#step-06-commit-and-push-the-changes-to-the-remote-repository","text":"","title":"STEP 06- commit and push the changes to the remote repository"},{"location":"data_prep/","text":"Data Prepration Stage Convert my data into train and test.tsv in 70:30 ratio data.xml |-train.tsv |-test.tsv - We are chosing only 3 tags in the xml data - 1. row ID, 2. title and body 3. Tags (stagoverflow tags specific to python) |Tags|feature names| |row ID|row ID| |title and body|test| |stagoverflow tags|Label - Python|","title":"data-prep-stage"},{"location":"data_prep/#data-prepration-stage","text":"Convert my data into train and test.tsv in 70:30 ratio data.xml |-train.tsv |-test.tsv - We are chosing only 3 tags in the xml data - 1. row ID, 2. title and body 3. Tags (stagoverflow tags specific to python) |Tags|feature names| |row ID|row ID| |title and body|test| |stagoverflow tags|Label - Python|","title":"Data Prepration Stage"},{"location":"featurization/","text":"Featurization stage corpus = [ \"zebra apple ball cat\" , \"ball cat dog elephant\" , \"very very unique\" ] # vectorizer = CountVectorizer() # X = vectorizer.fit_transform(corpus) # print(X.toarray()) # print(vectorizer.get_feature_names_out()) max_features = 100 ngrams = 3 #tri gram vectorizer = CountVectorizer ( max_features = max_features , ngram_range = ( 1 , ngrams )) X = vectorizer . fit_transform ( corpus ) print ( X . toarray ()) print ( vectorizer . get_feature_names_out ())","title":"Featurization"},{"location":"featurization/#featurization-stage","text":"corpus = [ \"zebra apple ball cat\" , \"ball cat dog elephant\" , \"very very unique\" ] # vectorizer = CountVectorizer() # X = vectorizer.fit_transform(corpus) # print(X.toarray()) # print(vectorizer.get_feature_names_out()) max_features = 100 ngrams = 3 #tri gram vectorizer = CountVectorizer ( max_features = max_features , ngram_range = ( 1 , ngrams )) X = vectorizer . fit_transform ( corpus ) print ( X . toarray ()) print ( vectorizer . get_feature_names_out ())","title":"Featurization stage"}]}